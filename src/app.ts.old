import * as Graph from './graph';

function img(width, height, link) {
  return {width, height, url: link};
  // return `<image xlink:href="${link}" width="${width}" height="${height}" x="-${width/2}" y="-${height/2}"/>`;
}

const DEFAULT_NODE_RADIUS = 10;

function showGraph(svgElem: SVGElement, graph: Graph.Graph) {
  const container = d3.select(svgElem);
  const width  = +container.attr('width'),
        height = +container.attr('height');

  addMarkers();

  const edges = showEdges();
  const nodes = showNodes();

  dragNodes();

  const simulation = d3.forceSimulation(graph.nodes)
      .force("link", d3.forceLink(graph.edges))
      .force("charge", <any>d3.forceManyBody<Graph.Node>())
      .force("center", d3.forceCenter(width / 2, height / 2))
      .force("collision", d3.forceCollide<Graph.Node>(n => n.radius || DEFAULT_NODE_RADIUS).iterations(10));

  simulation.on('tick', () => {
    updateEdges();
    updateNodes();
  })

  function showEdges() : d3.Selection<Element, Graph.Edge, Element, {}> {
    return container.append('g')
        .attr('class', 'edges')
      .selectAll('path')
        .data(graph.edges)
      .enter().append('path')
        .attr('class', 'edge');
  }

  function showNodes() : d3.Selection<Element, Graph.Node, Element, {}> {
    return container.append('g')
        .attr('class', 'nodes')
      .selectAll('circle')
        .data(graph.nodes)
      .enter().append('circle')
        .attr('class', 'node')
        .attr('r', n => n.radius || DEFAULT_NODE_RADIUS)
        .call(dragNodes());
  }

  function dragNodes() {
    return d3.drag()
      .on('start', (node: Graph.Node) => {
        if (!d3.event.active) simulation.alphaTarget(0.3).restart();
        node.fixed = true;
      })
      .on('drag', (node: Graph.Node) => {
        node.fixed = true;
        node.x = d3.event.x;
        node.y = d3.event.y;
      })
      .on('end', (node: Graph.Node) => {
        if (!d3.event.active) simulation.alphaTarget(0);
        node.fixed = false;
      })
  }

  function updateEdges() {
    edges.call(path => {
      path.attr('d', edge => {
        const deltaX = edge.target.x - edge.source.x;
        const deltaY = edge.target.y - edge.source.y;
        const dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY);

        const normX = deltaX / dist;
        const normY = deltaY / dist;
        const sourcePadding = edge.source.radius || DEFAULT_NODE_RADIUS;
        const targetPadding = edge.target.radius || DEFAULT_NODE_RADIUS;

        const sourceX = edge.source.x + (sourcePadding * normX);
        const sourceY = edge.source.y + (sourcePadding * normY);
        const targetX = edge.target.x - (targetPadding * normX);
        const targetY = edge.target.y - (targetPadding * normY);

        return `M${sourceX},${sourceY} L${targetX},${targetY}`;
      })
    })
    edges
        .attr('x1', (e: Graph.Edge) => e.source.x)
        .attr('y1', (e: Graph.Edge) => e.source.y)
        .attr('x2', (e: Graph.Edge) => e.target.x)
        .attr('y2', (e: Graph.Edge) => e.target.y);
  }

  function updateNodes() {
    nodes
        .attr('cx', (n: Graph.Node) => n.x)
        .attr('cy', n => n.y);
  }

  function addMarkers() {
    const defs = container.append('defs');
    defs.append('marker')
        .attr('id', 'end-arrow')
        .attr('viewBox', '0 -5 10 10')
        .attr('refX', 6)
        .attr('markerWidth', 6)
        .attr('markerHeight', 6)
        .attr('orient', 'auto')
      .append('svg:path')
        .attr('d', 'M0,-5L10,0L0,5');
  }
}

class App {
  types: any;

  graph: Graph.Graph;

  run() {
    showGraph(<any>document.querySelector("#canvas"), this.graph);
  }
}

export const app = (<any>window).app = new App();

app.types = {
  nodes: {
    'up': {
      radius: 20,
      icon: img(40, 40, 'https://upload.wikimedia.org/wikipedia/commons/d/d5/Human-go-up.svg')
    },
    'down': {
      radius: 20,
      icon: img(40, 40, 'https://upload.wikimedia.org/wikipedia/commons/0/08/Human-go-down.svg')
    },
    'request': {
      radius: 20,
      icon: img(40, 40, 'https://upload.wikimedia.org/wikipedia/commons/2/29/Fxemoji_u2757.svg')
    },
    'elevator': {
      radius: 20,
      icon: img(40, 40, 'http://vignette3.wikia.nocookie.net/elevation/images/6/65/AIGA_Elevator.svg')
    },
    'floor': {}
  },
  edges: [
    { id:'I7', name: 'on' },
    { id:'I8', name: 'call' },
    { id:'I9', name: 'stop' },
    { id:'I10', name: 'holds' },
    { id:'I11', name: 'next_up' },
    { id:'I12', name: 'higher_than' }
  ]
}

const nodes: Graph.Node[] = [
  { id: 0, type: 'elevator', x:94, y:74 },
  { id: 1, type: 'floor', x:273, y:69 },
  { id: 2, type: 'down', x:81, y:156 },
  { id: 3, type: 'floor', x:310, y:163 },
  { id: 4, type: 'floor', x:90, y:249 },
  { id: 5, type: 'request', x:278, y:256 }
].map(n => new Graph.Node(<any>n));

const edges: Graph.Edge[] = [
    { id: 105, source: 0, target: 1, type: 'I7' },
    { id: 106, source: 3, target: 1, type: 'I11' },
    { id: 107, source: 1, target: 4, type: 'I12' },
    { id: 108, source: 4, target: 5, type: 'I10' }
].map(e => ({
  id: e.id,
  source: nodes[e.source],
  target: nodes[e.target],
  type: e.type
}));

app.graph = {nodes, edges};
